generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

// Main user model - the core of our authentication system
model User {
  id          String   @id @default(cuid()) // Internal database ID
  osId        String   @unique // OneStep ID - public identifier (e.g., OS7K2M4N9)
  username    String?  @unique // User-chosen username (6-20 chars)
  email       String?  @unique // Email address (optional initially)
  phoneNumber String?  @unique // Phone number for verification
  
  // Personal information
  firstName    String? // First name
  lastName     String? // Last name
  dateOfBirth  DateTime? // Used for age verification and passcode validation
  
  // Authentication data
  passcodeHash String? // Hashed 6-digit passcode
  
  // Account status
  isVerified      Boolean @default(false) // Phone/email verified through OTP
  isSetupComplete Boolean @default(false) // All setup steps completed
  kycStatus       String  @default("NOT_STARTED") // NOT_STARTED, IN_PROGRESS, APPROVED, REJECTED
  kycData         Json?   // Encrypted KYC information
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Related records - these create the relationships
  devices      Device[]         // User's registered devices (max 5)
  biometrics   Biometric[]      // Biometric authentication data
  socialLogins SocialLogin[]    // Social media logins (Telegram, etc.)
  securityLogs SecurityLog[]    // Security events for this user
  avvLogs      AvvLog[]         // Auto-verification logs
  ssoSessions  SsoSession[]     // Single sign-on sessions
  backupCodes  BackupCode[]     // Recovery codes
  
  @@map("users") // This will be the actual table name in the database
}

// Device management - users can register up to 5 devices for security
model Device {
  id          String   @id @default(cuid())
  userId      String   // Foreign key linking to User table
  deviceName  String   // User-friendly name like "iPhone 15", "MacBook Pro"
  deviceType  String   // mobile, tablet, desktop, unknown
  fingerprint String   @unique // Unique device identifier hash
  userAgent   String   // Browser/app user agent string
  ipAddress   String   // IP address when device was registered
  isActive    Boolean  @default(true) // Can be deactivated for security
  
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  
  // This creates the relationship between Device and User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("devices")
}

// Biometric authentication data using WebAuthn standard
model Biometric {
  id           String @id @default(cuid())
  userId       String // Foreign key to User
  credentialId String @unique // WebAuthn credential ID
  publicKey    Bytes  // WebAuthn public key for verification
  counter      Int    @default(0) // WebAuthn signature counter (prevents replay attacks)
  deviceType   String // touch, face, fingerprint, etc.
  isActive     Boolean @default(true)
  
  createdAt DateTime @default(now())
  lastUsedAt DateTime?
  
  // Relationship to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("biometrics")
}

// Social login providers like Telegram, Google, etc.
model SocialLogin {
  id         String @id @default(cuid())
  userId     String // Foreign key to User
  provider   String // telegram, google, apple, etc.
  providerId String // User ID from the social provider
  metadata   Json?  // Additional data from the provider (profile info, etc.)
  
  createdAt DateTime @default(now())
  
  // Relationship to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Ensure one account per provider per user
  @@unique([userId, provider])
  @@map("social_logins")
}

// OTP (One-Time Password) verification for phone/email verification
model OtpVerification {
  id         String @id @default(cuid())
  identifier String // Phone number or email address
  code       String // The actual OTP code (6 digits)
  purpose    String // LOGIN, SIGNUP, RESET_PASSWORD, VERIFY_PHONE, VERIFY_EMAIL
  attempts   Int    @default(0) // How many times they've tried to verify
  maxAttempts Int   @default(5) // Maximum allowed attempts
  isUsed     Boolean @default(false) // Has this OTP been successfully used?
  expiresAt  DateTime // When this OTP expires (usually 10 minutes)
  verifiedAt DateTime? // When it was successfully verified
  
  createdAt DateTime @default(now())
  
  @@map("otp_verifications")
}

// Security event logging for monitoring, compliance, and debugging
model SecurityLog {
  id          String @id @default(cuid())
  userId      String? // Optional - some events might not be user-specific
  eventType   String  // LOGIN_SUCCESS, LOGIN_FAILED, ACCOUNT_CREATED, etc.
  description String? // Human-readable description of what happened
  metadata    Json?   // Additional structured data about the event
  ipAddress   String? // Where the event originated from
  userAgent   String? // Browser/device information
  deviceId    String? // Which device triggered this event
  riskLevel   String  @default("LOW") // LOW, MEDIUM, HIGH, CRITICAL
  
  createdAt DateTime @default(now())
  
  // Optional relationship to User (some events might not have a user)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("security_logs")
}

// Auto-Verification & Validation (AVV) system logs
// This tracks our automated security checks
model AvvLog {
  id        String @id @default(cuid())
  userId    String // Foreign key to User
  checkType String // PASSCODE_STRENGTH, BIOMETRIC_QUALITY, DEVICE_TRUST, etc.
  input     String? // What was being checked (may be redacted for security)
  result    String // PASS, FAIL, WARNING
  reason    String? // Why it failed or warned
  metadata  Json?  // Additional data about the check
  
  createdAt DateTime @default(now())
  
  // Relationship to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("avv_logs")
}

// Single Sign-On sessions for external dApps and applications
model SsoSession {
  id           String @id @default(cuid())
  userId       String // Foreign key to User
  osId         String // OneStep ID for quick lookup
  dappId       String // External application identifier
  sessionToken String @unique // Secure session token for the external app
  isActive     Boolean @default(true)
  expiresAt    DateTime // When this SSO session expires
  
  createdAt DateTime @default(now())
  
  // Relationship to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sso_sessions")
}

// Backup codes for account recovery when users lose access
model BackupCode {
  id     String @id @default(cuid())
  userId String // Foreign key to User
  code   String // Hashed backup code (never store plain text)
  isUsed Boolean @default(false) // Has this code been used?
  usedAt DateTime? // When it was used
  
  createdAt DateTime @default(now())
  expiresAt DateTime? // Optional expiration date
  
  // Relationship to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("backup_codes")
}

// API keys for developers integrating with OneStep
model ApiKey {
  id          String @id @default(cuid())
  keyId       String @unique // Public key identifier
  keyHash     String // Hashed secret key (never store plain text)
  name        String // User-friendly name for the key
  permissions Json   // What this key is allowed to access
  isActive    Boolean @default(true)
  lastUsedAt  DateTime?
  
  // Rate limiting settings
  rateLimit   Int @default(1000) // Requests per hour
  usageCount  Int @default(0) // Current usage in the current window
  
  createdAt DateTime @default(now())
  expiresAt DateTime? // Optional expiration date
  
  @@map("api_keys")
}

// Webhook endpoints for real-time notifications to external services
model WebhookEndpoint {
  id          String @id @default(cuid())
  url         String // The webhook URL to send events to
  events      String[] // Array of event types this endpoint wants
  secret      String // Secret for webhook signature verification
  isActive    Boolean @default(true)
  failureCount Int @default(0) // How many times delivery has failed
  lastSuccess DateTime? // Last successful delivery
  lastFailure DateTime? // Last failed delivery
  
  createdAt DateTime @default(now())
  
  @@map("webhook_endpoints")
}

// Audit trail for important system changes (compliance requirement)
model AuditLog {
  id         String @id @default(cuid())
  action     String // What action was performed
  entityType String // What type of entity was affected (User, Device, etc.)
  entityId   String // ID of the specific entity
  oldValues  Json?  // What the data looked like before
  newValues  Json?  // What the data looks like after
  performedBy String? // Who or what made this change
  ipAddress  String? // Where the change came from
  userAgent  String? // What device/browser made the change
  
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}

// System configuration and feature flags
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique // Configuration key (e.g., "max_devices_per_user")
  value Json   // The actual configuration value
  type  String // Data type: STRING, NUMBER, BOOLEAN, JSON
  description String? // Human-readable explanation of what this does
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_configs")
}

// Rate limiting tracking for production environments
model RateLimit {
  id         String @id @default(cuid())
  identifier String // IP address, user ID, API key, etc.
  action     String // What action is being rate limited
  count      Int    @default(1) // How many requests in this window
  windowStart DateTime // When this rate limit window started
  windowEnd   DateTime // When this rate limit window ends
  
  // Ensure unique tracking per identifier/action/window
  @@unique([identifier, action, windowStart])
  @@map("rate_limits")
}

// Notification system for emails, SMS, push notifications, etc.
model Notification {
  id       String @id @default(cuid())
  userId   String? // Optional - some notifications are system-wide
  type     String  // EMAIL, SMS, PUSH, IN_APP
  channel  String  // Specific channel like telegram, email, etc.
  subject  String  // Notification subject/title
  content  String  // Notification body/content
  status   String  @default("PENDING") // PENDING, SENT, DELIVERED, FAILED
  metadata Json?   // Additional notification data
  
  sentAt      DateTime? // When the notification was sent
  deliveredAt DateTime? // When it was confirmed delivered
  createdAt   DateTime @default(now())
  
  @@map("notifications")
}